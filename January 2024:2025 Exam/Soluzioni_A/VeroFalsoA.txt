{'A': {'premessa': '', 'domanda': 'Un numerale in base 8 da 3 cifre richiede al minimo 9 bit per essere rappresentato in base 2', 'ris': '?'}, 'B': {'premessa': 'Dato il numerale a 16 bit:\n 1111111111100011\n', 'domanda': 'In complemento a 2 il numero corrispondente al numerale ha il modulo più grande di 50', 'ris': '?'}, 'C': {'premessa': 'Sia dato il numerale a 8 bit:\n 11100011', 'domanda': 'In eccesso 2^7 il numerale rappresenta un numero positivo', 'ris': '?'}, 'D': {'premessa': '', 'domanda': 'Il numerale 1.1111111111 in binario puro rappresenta un numero frazionario < 2', 'ris': '?'}, 


'E': {'premessa': '', 'domanda': 'Nello standard IEEE per i numeri reali a virgola mobile, denormalizzando la mantissa si possono rappresentare numeri positivi arbitrariamente piccoli', 'ris': '?'}, 

'F': {'premessa': 'La gestione degli interi in Python utilizza la base 16 per rappresentare interi molto grandi','domanda': '', 'ris': '?'}, 

'G': {'premessa': 'Passando dallo standard IEEE per i numeri reali a virgola mobile a 32 bit a quello 64 bit la maggior parte dei bit addizionali è stata utilizzata per aumentare l\'esponente e rappresentare numeri con modulo più grande.','domanda': '',  'ris': '?'}, 

'H': {'premessa': "Sia data una rappresentazione in virgola mobile, un bit per il segno (1 positivo), 5 bit per l'esponente in eccesso a 2^4 e i restanti 10 bit per la parte frazionaria della mantissa normalizzata m (1=<m<2) ", 'domanda': "Usando la notazione descritta si possono rappresentare numeri dell'ordine di grandezza di 10000 in base 10", 'ris': '?'}}
